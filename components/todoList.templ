package components

import (
	"github.com/Tottitov/todo/models"
	"strconv"
)

templ TodoList(todos []models.Todo, filter string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Simple Todo App</title>
			<script src="https://unpkg.com/htmx.org@1.9.5"></script>
			<script src="https://cdn.tailwindcss.com"></script>
		</head>
		<body class="bg-white text-gray-800 dark:bg-gray-900 dark:text-gray-100 font-sans max-w-xl mx-auto p-6">
			<h1 class="text-3xl font-bold mb-4">Todos</h1>
			<form
				hx-post="/todos"
				hx-target="#todo-list"
				hx-swap="outerHTML"
				hx-on="htmx:afterOnLoad: this.querySelector('input[name=title]').value = ''"
				class="flex gap-2 mb-6"
			>
				<input
					type="text"
					name="title"
					placeholder="What needs to be done?"
					maxlength="35"
					required
					class="flex-grow border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-black dark:text-white rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400"
				/>
				<button
					type="submit"
					class="bg-gray-700 text-white px-4 py-2 rounded hover:bg-gray-600"
				>
					Add
				</button>
			</form>
			@TodoListContent(todos, filter)
		</body>
	</html>
}

templ TodoListContent(todos []models.Todo, filter string) {
	<div id="todo-list">
		for _, todo := range todos {
			@TodoItem(todo)
		}
		<!-- Footer with filter buttons -->
		<div class="flex flex-wrap justify-between items-center mt-4 text-sm text-gray-600 dark:text-gray-300">
			<div>{ strconv.Itoa(activeCount(todos)) } items left</div>
			<div class="flex gap-2">
				<a href="/" class={ filterClass(filter, "") }>All</a>
				<a href="/?filter=active" class={ filterClass(filter, "active") }>Active</a>
				<a href="/?filter=completed" class={ filterClass(filter, "completed") }>Completed</a>
			</div>
			if hasCompleted(todos) {
				<form
					hx-post="/todos/completed"
					hx-include="[name=_method]"
					hx-target="#todo-list"
					hx-swap="innerHTML"
				>
					<input type="hidden" name="_method" value="DELETE"/>
					<button
						type="submit"
						class="text-gray-500 hover:text-gray-800 dark:hover:text-white underline"
					>
						Clear completed
					</button>
				</form>
			}
		</div>
	</div>
}

func activeCount(todos []models.Todo) int {
	count := 0
	for _, t := range todos {
		if !t.Completed {
			count++
		}
	}
	return count
}

func hasCompleted(todos []models.Todo) bool {
	for _, t := range todos {
		if t.Completed {
			return true
		}
	}
	return false
}

func filterClass(current string, name string) string {
	if current == name {
		return "px-2 py-1 border rounded border-red-500"
	}
	return "px-2 py-1 hover:underline"
}
